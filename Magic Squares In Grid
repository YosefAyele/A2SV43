class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])

        if m < 3 or n < 3:
            return 0

        res = 0
        
        threeBy3 = [(-1,-1),(-1,0),(-1,1),(0,-1),(0,0),(0,1),(1,-1),(1,0),(1,1)]
        for row in range(1,m-1):
            for col in range(1,n-1):
          

                # check rows
                r1 = grid[row-1][col-1] + grid[row-1][col] + grid[row-1][col+1]
                r2 = grid[row][col-1] + grid[row][col] + grid[row][col+1]
                r3 = grid[row+1][col-1] + grid[row+1][col] + grid[row+1][col+1]

                # check cols
                c1 = grid[row-1][col-1] + grid[row][col-1] + grid[row+1][col-1]
                c2 = grid[row-1][col] + grid[row][col] + grid[row+1][col]
                c3 = grid[row-1][col+1] + grid[row][col+1] + grid[row+1][col+1]

                #check diagonals
                d1 = grid[row-1][col-1] + grid[row][col] + grid[row+1][col+1]
                d2 = grid[row-1][col+1] + grid[row][col] + grid[row+1][col-1]

                nums = set([grid[row+dx][col+dy] for dx,dy in threeBy3 if 0 < grid[row+dx][col+dy] < 10])
                sums = set([r1,r2,r3,c1,c2,c3,d1,d2])

                if len(nums) == 9 and len(sums) == 1:
                    res += 1
        return res
