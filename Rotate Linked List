# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if k == 0:
            return head
        count = 0
        res = ListNode(0)
        dummy = res

        # first reverse the whole linked list
        prev = None
        curr = head
        while curr:
            count += 1
            nxt = curr.next
            curr.next = prev
            prev = curr
            curr = nxt
        
        if count == 0:
            return head
        else:
            k %= count

        # then rotate the first part of the linked list
        part1 = prev
        curr = part1
        prev1 = None

        for _ in range(k):

            nxt = curr.next
            curr.next = prev1
            prev1 = curr
            curr = nxt
        #  now again reverse the second part of the linked list
        prev2 = None
        while curr:
            nxt = curr.next
            curr.next = prev2
            prev2 = curr
            curr = nxt

        if not prev1:
            return prev2
        elif not prev2:
            return prev1
        else:
            temp = prev1
            while temp and temp.next:
                temp = temp.next
            temp.next = prev2

            return prev1
